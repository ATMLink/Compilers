; lexer/src 目录各模块说明

1. Arena 分配相关

arena_create
	•	功能: 创建一个新的 Arena 结构体，分配指定大小的内存。
	•	作用: 初始化一个新的 Arena（内存池），为后续分配内存准备。它返回一个指向 Arena 的指针。

arena_alloc
	•	功能: 从 Arena 中分配指定大小的内存。
	•	作用: 在 Arena 内存池中按顺序分配内存，确保不会超出预定大小。如果分配成功，返回指向内存块的指针。

arena_free
	•	功能: 释放 Arena 内存池占用的内存。
	•	作用: 在程序结束时，释放 Arena 所占用的内存空间，避免内存泄漏。

2. 词法分析（Lexer）相关

lexer_next_token
	•	功能: 读取正则表达式中的下一个符号，生成一个相应的 Token。
	•	作用: 这是一个词法分析器，逐步解析输入的字符串，并根据字符的类型（如字母、数字、*、+、?、|、.、(、) 等）生成相应的 Token。
	•	生成 Token 类型有 T_CHAR（普通字符）、T_STAR（*）、T_PLUS（+）、T_QUESTION（?）、T_OR（|）、T_LPAREN（(）、T_RPAREN（)）、T_DOT（.）、T_INVALID（无效字符）、T_EOF（结束符）。

3. NFA 构建相关

create_state
	•	功能: 创建并返回一个新的 NFA 状态。
	•	作用: 在 Arena 中为 NFA 创建一个新的状态（State），并初始化其转移列表为空，标记为非接收状态。

add_transition
	•	功能: 向一个 NFA 状态添加一个转移。
	•	作用: 在从状态 from 到状态 to 之间，使用指定的符号 symbol 添加一条转移。这个转移是将当前状态的 transitions 列表更新为新的转移。

create_char_nfa
	•	功能: 创建一个简单的匹配单个字符的 NFA。
	•	作用: 创建一个从起始状态到接收状态的转移链，表示匹配某个具体字符的正则表达式。例如，对于字符 a，会创建一个状态机，匹配到 a 时接受输入。

create_dot_nfa
	•	功能: 创建一个匹配任意单字符的 NFA（正则中的 .）。
	•	作用: 支持正则表达式中的点号 .，可匹配任意单个字符。

create_star_nfa
	•	功能: 创建一个表示 * 操作符（零次或多次重复）的 NFA。
	•	作用: 创建一个用于处理 * 操作符的状态机，表示一个子表达式可以重复零次或多次。通过 epsilon 转移（即无需消耗字符的转移）来实现零次和多次重复的功能。

create_plus_nfa
	•	功能: 创建一个表示 + 操作符（一次或多次重复）的 NFA。
	•	作用: 创建一个用于处理 + 操作符的状态机，表示一个子表达式可以重复一次或多次。

create_question_nfa
	•	功能: 创建一个表示 ? 操作符（零次或一次）的 NFA。
	•	作用: 创建一个用于处理 ? 操作符的状态机，表示一个子表达式可以出现零次或一次。

create_concat_nfa
	•	功能: 串联两个 NFA。
	•	作用: 用于正则表达式的连接操作，将两个 NFA 串联起来。

create_or_nfa
	•	功能: 构造正则中的 |（或）操作的 NFA。
	•	作用: 支持正则表达式的或分支。

4. NFA 模拟相关

epsilon_closure
	•	功能: 计算某个状态的 epsilon 闭包。
	•	作用: 从某个状态开始，递归地寻找所有通过 epsilon 转移可以到达的状态，并将它们加入到闭包中。这个函数用于 NFA 中的 epsilon 转移处理。

simulate_nfa
	•	功能: 模拟 NFA 的执行，判断输入字符串是否匹配正则表达式。
	•	作用: 用来模拟输入字符串在 NFA 上的匹配过程。它遍历每个字符，并根据当前状态和字符选择相应的转移。最终，检查是否能到达接受状态来确定是否匹配。

5. DFA 构建与模拟相关

dfa.h/dfa.c
	•	功能: 实现 NFA 到 DFA 的子集构造算法，以及 DFA 的状态转移和模拟。
	•	作用: 用于将 NFA 转换为等价的 DFA，并支持高效的字符串匹配。

simulate_dfa
	•	功能: 用 DFA 对输入字符串进行匹配。
	•	作用: 判断输入是否被 DFA 接受。

6. 正则表达式递归下降解析器

parser.h/parser.c
	•	功能: 递归下降解析正则表达式，生成对应的 NFA。
	•	作用: 支持正则表达式的括号分组、|、*、+、?、. 等操作，直接生成 NFA。

7. 匹配器相关

matcher.h/matcher.c
	•	功能: 提供正则表达式的高层匹配接口。
	•	作用: 封装 NFA/DFA 的构建与模拟，便于直接对输入字符串进行正则匹配。

8. 主程序相关

parse_regex
	•	功能: 解析输入的正则表达式并生成相应的 NFA。
	•	作用: 通过词法分析器 (lexer_next_token) 逐步解析正则表达式的字符，使用不同的 NFA 构建方法（如字符匹配、*、+、?、|、.、括号等）创建最终的 NFA。

main
	•	功能: 程序的入口点，负责读取输入，解析正则表达式，构建 NFA/DFA，并使用 simulate_nfa/simulate_dfa 检查输入字符串是否匹配正则表达式。
	•	作用: 负责控制整个程序的流程，接受用户输入的正则表达式和测试字符串，调用上述的函数来完成正则表达式匹配的工作。

